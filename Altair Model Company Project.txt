select*from products;
select*from orderdetails;
select*from customers;
select*from payments;
select*from employees;
select*from offices;


General Select code

SELECT DISTINCT column_name, AGG_FUNC(column_or_expression), â€¦
FROM mytable
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE constraint_expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;



// starts here //
/* i think we are missing subquery's throught the project. we gotta learn that*/

/*Sales topic:*/

select sales_year, 
sales_month, 
x.Motorcycles_Sales, 
Lag(Motorcycles_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Motorcycles_Sales_PY,
x.Classic_Cars_Sales,
Lag(Classic_Cars_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Ccs_PreviousYear,
x.Trucks_Buses_Sales,
Lag(Trucks_Buses_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Trucks_Buses_Sales_PreviousYear,
x.Vintage_Cars_Sales,
Lag(Vintage_Cars_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Vintage_Cars_Sales_PreviousYear,
x.Planes_Sales,
Lag(Planes_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Planes_Sales_PreviousYear,
x.Trains_Sales,
Lag(Trains_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Trains_PreviousYear,
x.Ships_Sales,
Lag(Ships_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Ships_PreviousYear
from (SELECT 
YEAR(o.orderDate) as Sales_Year,
MONTH(o.orderDate) as Sales_Month,
SUM(case when p.productLine = 'Motorcycles' then od.quantityOrdered else 0 end) AS Motorcycles_Sales,
SUM(case when p.productLine = 'Classic Cars' then od.quantityOrdered else 0 end) AS Classic_Cars_Sales,
SUM(case when p.productLine = 'Trucks and Buses' then od.quantityOrdered else 0 end) AS Trucks_Buses_Sales,
SUM(case when p.productLine = 'Vintage Cars' then od.quantityOrdered else 0 end) AS Vintage_Cars_Sales,
SUM(case when p.productLine = 'Planes' then od.quantityOrdered else 0 end) AS Planes_Sales,
SUM(case when p.productLine = 'Trains' then od.quantityOrdered else 0 end) AS Trains_Sales,
SUM(case when p.productLine = 'Ships' then od.quantityOrdered else 0 end) AS Ships_Sales
FROM orders o
join orderdetails od on o.orderNumber = od.orderNumber
join products p on p.productCode = od.productCode
GROUP BY YEAR(o.orderDate), MONTH(o.orderDate)
ORDER BY YEAR(o.orderDate), MONTH(o.orderDate)) as x;


just in case we need to use the rate of change in sql
select f.year, f.month, 
	f.Motorcycles_Sales1,
	Motorcycles_Sales_PY,
    (f.Motorcycles_Sales1 / Motorcycles_Sales_PY)
from (select sales_year as year, 
sales_month as month, 
x.Motorcycles_Sales as Motorcycles_Sales1 , 
Lag(Motorcycles_Sales, 12) over(order by x.Sales_Year, x.Sales_Month) AS Motorcycles_Sales_PY,
x.classic_cars_sales,
Lag(Classic_Cars_Sales, 12) over(order by x.Sales_Year, x.Sales_Month) AS Ccs_PreviousYear,
x.Trucks_Buses_Sales,
Lag(Trucks_Buses_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Trucks_Buses_Sales_PreviousYear,
x.Vintage_Cars_Sales,
Lag(Vintage_Cars_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Vintage_Cars_Sales_PreviousYear,
x.Planes_Sales,
Lag(Planes_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Planes_Sales_PreviousYear,
x.Trains_Sales,
Lag(Trains_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Trains_PreviousYear,
x.Ships_Sales,
Lag(Ships_Sales, 12) over(order by x.Sales_Year, x.Sales_Month)AS Ships_PreviousYear
from (SELECT 
YEAR(o.orderDate) as Sales_Year,
MONTH(o.orderDate) as Sales_Month,
SUM(case when p.productLine = 'Motorcycles' then od.quantityOrdered else 0 end) AS Motorcycles_Sales,
SUM(case when p.productLine = 'Classic Cars' then od.quantityOrdered else 0 end) AS Classic_Cars_Sales,
SUM(case when p.productLine = 'Trucks and Buses' then od.quantityOrdered else 0 end) AS Trucks_Buses_Sales,
SUM(case when p.productLine = 'Vintage Cars' then od.quantityOrdered else 0 end) AS Vintage_Cars_Sales,
SUM(case when p.productLine = 'Planes' then od.quantityOrdered else 0 end) AS Planes_Sales,
SUM(case when p.productLine = 'Trains' then od.quantityOrdered else 0 end) AS Trains_Sales,
SUM(case when p.productLine = 'Ships' then od.quantityOrdered else 0 end) AS Ships_Sales
FROM orders o
join orderdetails od on o.orderNumber = od.orderNumber
join products p on p.productCode = od.productCode
GROUP BY YEAR(o.orderDate), MONTH(o.orderDate)
ORDER BY YEAR(o.orderDate), MONTH(o.orderDate)) as x) as f
    
    
/*Financial Topic

Q1 -monthly turnover by country*/


SELECT sum(od.quantityordered) as order_turnover, c.country as customer_country
FROM customers c
	left Join orders o
		ON c.customerNumber = o.customernumber
	jOIN orderdetails od
		ON od.ordernumber = o.ordernumber
	GROUP BY c.country
	ORDER BY c.country, sum(od.quantityOrdered) DESC;
    
    /*missing the rest of the question*/
    
    
   Q2- Orders not paid
   
   	/* orders not paid and theyr value */
   	Select o.customernumber, o.orderdate, o.ordernumber, sum((od.quantityordered * od.priceeach)) as Order_Value
from orders o
join orderdetails od
	on o.ordernumber = od.ordernumber
group by o.ordernumber
having sum((od.quantityordered * od.priceeach)) not in (select p.amount
from payments p)/* this subquery will compare if there are values in the oder_value column in order table that are not in the ammount column in payments table and, therefore, are not being paid*/;

/*Logistics topic*/

SELECT p.productName, sum(od.quantityOrdered) as Total_ordered
FROM orderdetails od
    JOIN products p
      ON od.productcode = p.productcode
    GROUP BY p.productCode
    ORDER BY sum(od.quantityOrdered) DESC
    LIMIT 5;
    
    
/* top 5 ordered products, missing the rest */

/* human resources topic */


SELECT year, month, x.sellers, monthly_turnover
FROM (SELECT year(o.OrderDate) as year,
			month(o.OrderDate) as month,
			concat(e.firstName, ' ', e.lastname) AS sellers,
            SUM(od.quantityOrdered) AS monthly_turnover,
            row_number() over (partition by year(o.OrderDate), month(o.OrderDate) order by SUM(od.quantityOrdered) desc) as seq
FROM orders as o
JOIN customers as c
ON c.customerNumber=o.customerNumber
JOIN employees as e
ON e.employeeNumber=c.salesRepEmployeeNumber
JOIN orderdetails as od
ON od.orderNumber=o.orderNumber
GROUP BY year(o.OrderDate), month(o.OrderDate), sellers
Order by year(o.OrderDate), month(o.OrderDate)) as x
where x.seq <=2;
